"
"............. 配置项

if filereadable(expand("~/.spf13-vim-3/.vimrc.ssconfig"))
  source ~/.spf13-vim-3/.vimrc.ssconfig
endif
if !exists('g:gitPath')
  let g:gitPath = "E:/ss707494/app/Git"
  "let g:gitPath = "C:/Program Files/Git"
endif

set guifont=Andale_Mono:h16,Menlo:h16,Consolas:h16,Courier_New:h16
set wrap
set rnu!
set ignorecase
set hlsearch
set nospell
set autowrite                       " Automatically write a file when leaving a modified buffer
set autowriteall
set autoread
set go-=m
set ts=2
set sw=2
set softtabstop=2               " Let backspace delete indent
set fileencodings=utf-8,gbk,gb18030,gk2312
set isk-=-
set isk-=#
set isk-=.

if has('win32')
    au GUIEnter * simalt ~x
else
    au GUIEnter * call MaximizeWindow()
endif

" 窗口最大化
function! MaximizeWindow()
    silent !wmctrl -r :ACTIVE: -b add,maximized_vert,maximized_horz
endfunction 


"nmap <c-v> p
" rg
if executable('rg')
    set grepprg=rg\ --color=never\ --vimgrep\ --no-heading
    set grepformat=%f:%l:%c:%m,%f:%l:%m
    let g:ctrlp_user_command.fallback = 'rg %s --files --color=never --glob ""'
    let g:ctrlp_use_caching = 0
    let g:ackprg = 'rg --vimgrep --no-heading'
endif

" session.vim
if isdirectory(expand("~/.vim/bundle/vim-session/"))
  let g:session_autosave ='yes'
  let g:session_autoload ='no'
  let g:session_autosave_silent =1
  let g:session_command_aliases = 1
endif


" .spf13-vim-3/.vim/bundle/vim-coloresque/after/syntax/css/
"  gg125

" 菜单配置
let g:ssData = {}
function! s:addMenuData(menuStr, name, key, command) 
  if !has_key(g:ssData, a:menuStr)
    let g:ssData[a:menuStr] ={'data': {}, 'list': []}
  endif
  let s:menuData = g:ssData[a:menuStr]
  let s:_list = s:menuData['list']
  let s:_data = s:menuData['data']
  let s:id = string(len(s:_list))
  call add(s:_list, s:id)
  let s:_data[s:id] = {'name': a:name, 'key': a:key, "command": a:command, 'num': 0}
endfunction
  function! SSMenu(menuData)
    if empty(a:menuData) || !has_key(a:menuData, 'data') || !has_key(a:menuData, 'list')
      return
    endif
    let s:_cmd = ""
    let s:_data = a:menuData.data
    let s:_idlist = sort(copy(a:menuData.list), "Compare_")
    let s:_inputList = map(copy(s:_idlist), {key, val -> ' ' . get(s:_data, val).key . ' || ' . get(s:_data, val).name . ' ('  . get(s:_data, val).command . ')--'. get(s:_data, val).num})
    echo join(s:_inputList, "\n")."\n"
    let s:_cmd = nr2char(getchar())
    for item in s:_idlist
      if s:_data[item].key == s:_cmd
        let s:__com = s:_data[item].command
        let s:_data[item].num+=1
        exe s:__com
        :redraw
      endif
      :redraw
    endfor
  endfunction
  function! Compare_(i1, i2) abort
    return get(s:_data, a:i1).num - get(s:_data, a:i2).num
  endfunction
function! PutInReg(str, ...)
  let s:_n = "+"
  if !empty(a:000) 
    let s:_n = a:1
  endif
  exe "normal O" .  a:str
  exe "normal ^v$h\"".s:_n."y"
  exe "normal \"_dd"
endfunction
function! DeleteEmptyBuffers()
    let [i, n; empty] = [1, bufnr('$')]
    while i <= n
        if bufexists(i) && bufname(i) == ''
            call add(empty, i)
        endif
        let i += 1
    endwhile
    if len(empty) > 0
        exe 'bdelete' join(empty)
    endif
endfunction

call s:addMenuData('menuData', "打开当前目录", 'e', '!start explorer %:p:h')
call s:addMenuData('menuData', "打开cmd", 'c', '!start cmd')
call s:addMenuData('menuData', "切换目录cd", '2', 'cd %:p:h')
call s:addMenuData('menuData', "切换目录lcd", '3', 'lcd %:p:h')
call s:addMenuData('menuData', "powershell", 'p', '!start Powershell')
call s:addMenuData('menuData', "marks", 'm', "marks|let __inputtag = nr2char(getchar())|redraw|exe \"normal '\".__inputtag")
"call s:addMenuData('menuData', "Session", 'l', "SessionOpen")
"call s:addMenuData('menuData', "Restart", 'r', "RestartVim")
call s:addMenuData('menuData', "ResetVimrc", 'v', "so ~/.vimrc")
call s:addMenuData('menuData', "GitBash", 'g', "cd %:p:h | !start ". g:gitPath . "/bin/sh.exe -login -i")
if has_key(g:ssData, 'menuData')
  map <leader>s :call SSMenu(g:ssData.menuData)<CR>
endif

"call s:addMenuData('optionData', "EditSessionList", 'p', "e ~/vimfiles/sessions/")
"call s:addMenuData('optionData', "ShowSession", 't', "echo v:this_session")
"map <leader>u :call SSMenu(g:ssData.optionData)<CR>

call s:addMenuData('commands', "cachetxt", 'c', "exe 'vs' | e ~/.spf13-vim-3/cachetxt")
call s:addMenuData('commands', "git pull --rebase", 'l', "!git pull --rebase")
call s:addMenuData('commands', "update-index", 'u', "call PutInReg('git update-index --assume-unchanged ')")
map <leader>m :call SSMenu(g:ssData.commands)<CR>

"if filereadable(expand("~/.spf13-vim-3/ssData"))
  "so ~/.spf13-vim-3/ssData
"endif
  "let g:ssData = json_decode(join(readfile('~/.spf13-vim-3/ssData'), ''))
  " 自动写入数据
  "function! SSDataInput()
    "call writefile([json_encode(g:ssData)], './.spf13-vim-3/ssData')
  "endfunction
  "autocmd VimLeavePre * call SSDataInput()


if isdirectory(expand("~/.vim/bundle/sessionman.vim/"))
  unmap <leader>ss
  unmap <leader>sl
  unmap <leader>sc
endif
cunmap w!!
":map <F4> [I:let nr = input("Which one: ")<Bar>exe "normal " . nr ."[\t"<CR>
imap <c-v> <c-r>+
cmap <c-v> <c-r>+
map <leader>j <C-W>j
map <leader>k <C-W>k
map <leader>h <C-W>h
map <leader>l <C-W>l
map <leader>x :q<CR>
map <leader>o <C-W>o
map <leader>- <C-W>_<C-W>\|
unmap <leader>jt
cunmap cwd
cunmap cd.
unmap <leader>ew
unmap <leader>es
unmap <leader>ev
unmap <leader>et
unmap <leader>sv
nnoremap <silent> <leader>gd :Gdiff<CR>
map <leader>r <ESC>:CtrlPMRUFiles<CR>
map <leader>w :call confirm('已经改了!!')<CR>
map <leader>q :q<CR>
"inoremap <Esc> <Esc>:wa<CR>

" tags
" set tags=tags;  " ; 不可省略，表示若当前目录中不存在tags， 则在父目录中寻找。
map <C-F12> :!ctags -R --exclude=node_modules --c++-kinds=+p --fields=+iaS --extra=+q .<CR> 

" ctrlp
"let g:ctrlp_working_path_mode = 'a'
"let g:ctrlp_root_markers = []
let g:ctrlp_custom_ignore = {
            \ 'dir':  '\.git$\|\.hg$\|\.svn$\|\.idea$',
            \ 'file': '\.exe$\|\.so$\|\.dll$\|\.pyc$' }

let g:auto_save = 1
let g:auto_save_silent = 1
let g:auto_save_write_all_buffers = 1
