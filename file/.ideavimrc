"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Maintainer:
"       Amir Salihefendic
"       http://amix.dk - amix@amix.dk
"
" Version:
"       5.0 - 29/05/12 15:43:36
"
" Blog_post:
"       http://amix.dk/blog/post/19691#The-ultimate-Vim-configuration-on-Github
"
" Awesome_version:
"       Get this config, nice color schemes and lots of plugins!
"
"       Install the awesome version from:
"
"           https://github.com/amix/vimrc
"
" Syntax_highlighted:
"       http://amix.dk/vim/vimrc.html
"
" Raw_version:
"       http://amix.dk/vim/vimrc.txt
"
" Sections:
"    -> General
"    -> VIM user interface
"    -> Colors and Fonts
"    -> Files and backups
"    -> Text, tab and indent related
"    -> Visual mode related
"    -> Moving around, tabs and buffers
"    -> Status line
"    -> Editing mappings
"    -> vimgrep searching and cope displaying
"    -> Spell checking
"    -> Misc
"    -> Helper functions
"
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => General
" Set to auto read when a file is changed from the outside
"
set autoread

" With a map leader it's possible to do extra key combinations
" like <leader>w saves the current file
" let mapleader = " "
" let g:mapleader = " "
"nnoremap <Space> <nop>

" Fast saving
"nmap <leader>w :w!<cr>

" :W sudo saves the file
" (useful for handling the permission-denied error)
"command W w !sudo tee % > /dev/null


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => VIM user interface
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Set 7 lines to the cursor - when moving vertically using j/k
set so=4

set relativenumber
set ignorecase
set hlsearch
nmap <c-s> <c-v>
set so=4
set incsearch
set nonu
set lazyredraw
set magic
set showmatch
set mat=2

" No annoying sound on errors
set noerrorbells
set novisualbell
set t_vb=
set tm=500

" Add a bit extra margin to the left
set foldcolumn=1


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Colors and Fonts
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Enable syntax highlighting
syntax enable

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Text, tab and indent related
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Use spaces instead of tabs
set expandtab

" Be smart when using tabs ;)
set smarttab

" 1 tab == 4 spaces
set shiftwidth=4
set tabstop=4

" Linebreak on 500 characters
set lbr
set tw=500

set ai "Auto indent
set si "Smart indent
set wrap "Wrap lines


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Moving around, tabs, windows and buffers
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" set clipboard=unnamedplus
map <space>j <C-W>j
map <space>k <C-W>k
map <space>h <C-W>h
map <space>l <C-W>l
map <space>c <C-W>c
map <silent> <space>v <c-v>

map <silent> <space>w :'<,'>action EditorSelectWord<CR>
vnoremap <silent> <space>w :'<,'>action EditorSelectWord<CR>
map <silent> <space>W :'<,'>action EditorUnSelectWord<CR>
vnoremap <silent> <space>W :'<,'>action EditorUnSelectWord<CR>

"vnoremap <silent> s //e<C-r>=&selection=='exclusive'?'+1':''<CR><CR>
    ":<C-u>call histdel('search',-1)<Bar>let @/=histget('search',-1)<CR>gv
"omap s :normal vs<CR>
vnoremap <silent> y y`]
vnoremap <silent> p p`]
nnoremap <silent> p p`]
"nmap <space>r :action ChooseRunConfiguration<CR>
nmap <space>s :action QuickList.ss<CR>
nmap <space>r :action RecentFiles<CR>
"nmap <space>r :action RecentLocations<CR>
nnoremap <space>f :action FindInPath<cr>
vnoremap <space>f <Esc>gvhh:<bs><bs><bs><bs><bs>action VimVisualSwapSelections<cr>:action FindInPath<cr>

nmap <space>e :action Macro.selectInPro <CR>
nmap <space>y :action SelectIn<CR>
"nmap % <Esc>:action EditorMatchBrace<CR>
nmap m <Esc>:action ToggleBookmark<CR>
nmap M <Esc>:action ShowBookmarks<CR>
nmap <space>o :action GotoAction<CR>
nmap <space>t :action ActivateRunToolWindow<CR>

map / :action Find<CR>
map ? :action Find<CR>
map n :action FindNext<CR>
map N :action FindPrevious<CR>
map * :action Macro.findOneWordNext<CR>
"nmap * :action EditorEscape<CR>
vnoremap * :action Macro.findInViewNext<CR>
nmap # :action Macro.findOneWordPre<CR>
vnoremap # :action Macro.findInViewPre<CR>

map <tab> %
set clipboard=unnamedplus
set clipboard+=ideaput
